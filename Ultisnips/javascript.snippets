###########
# GENERAL #
###########

snippet if "if" i
if ($1) {
	$2
}
endsnippet

snippet ife "if else" i
if ($1) {
	$2
} else {
	$3
}
endsnippet

snippet fn "<name>() { \n }" i
$1($2) {
	$3
}
endsnippet

snippet cfn "const <name> = () => { \n }" i
const $1 = $2 => {
	$3
}
endsnippet

snippet cfni "const <name> = () => return" i
const $1 = $2 => $3
endsnippet

snippet const "const <name> = foo" i
const $1 = $2
endsnippet

snippet dqs "document.querySelector" i
document.querySelector('$1')
endsnippet

snippet dqsa "document.querySelectorAll" i
document.querySelectorAll('$1')
endsnippet

snippet dgid "document.getElementById" i
document.getElementById('$1')
endsnippet

snippet clg "console log" i
console.log($1)
endsnippet

snippet cle "console error" i
console.error($1)
endsnippet

snippet map "map" i
map($1 => {
	$2
})
endsnippet

snippet mapi "map inline" i
map($1 => $2)
endsnippet

snippet fil "filter" i
filter($2 => {
	return $3
})
endsnippet

snippet fili "filter inline" i
$1.filter($2 => $3)
endsnippet

############
# PROMISES #
############

snippet then "then" i
then($1 => {
	$2
})
endsnippet

snippet catch "catch" i
catch(err => {
	$1
})
endsnippet

#########
# REACT #
#########

snippet rpta
$1: React.PropTypes.array,
endsnippet

snippet rptb
$1: React.PropTypes.bool,
endsnippet

snippet rptf
$1: React.PropTypes.func,
endsnippet

snippet rptn
$1: React.PropTypes.number,
endsnippet

snippet rpto
$1: React.PropTypes.object,
endsnippet

snippet rpts
$1: React.PropTypes.string,
endsnippet

snippet con "react constructor" i
constructor($1) {
	$2// super($1);
	// this.state = {
	//
	// }
	$3;
}
endsnippet

snippet render "react render" i
render() {
	const { $1 } = $2;

	return (
		$3
	);
}
endsnippet

snippet rc
import React from 'react'

export default class $1 extends React.Component {
	static propTypes = {
	}

	render() {
		return (
			<div>$1</div>
		)
	}
}
endsnippet

snippet cwm "componentWillMount"
componentWillMount() {
	$1
}
endsnippet

################
# MobX + React #
################

snippet mmod "MobX Model"
export const initialState = {
	$1: $2
};

export const $3 = () => initialState;
endsnippet

snippet mac "MobX action"
$1: action($2 => {
	$3;
}),
endsnippet

snippet macs "MobX actions"
/* eslint no-return-assign: 0 */
import React from 'react';
import {action, computed, useStrict} from 'mobx';
import axios from 'axios';

useStrict(true);

export const $1Actions = ($2, initialState) => ({
	// actions
	mac$3

	// computed
	mcom$4

	// utilities

});

endsnippet

snippet mcom "MobX computed"
$1: computed(() => {
	return $2;
}),
endsnippet

snippet mcon "React MobX Container"
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'mobx-react';
import $1 from './$1';
import stores from '../../stores';

const $2 = () => (
	<Provider stores={stores}>
		<$1 />
	</Provider>
);

document.addEventListener('DOMContentLoaded', () => {
	ReactDOM.render(
		<$2 />,
		document.querySelector('$3')
	);

	// fetch initial list data
	stores.$4.$5();
});
endsnippet

snippet mrc "MobX React Component"
import React from 'react';
import storeObserver from '../hoc/StoreObserver';
import $1 from './$1';

const $2 = ({ stores }) => {
	const { $3 } = stores;

	return (
		<div className="$4">
			<$1 />
		</div>
	)
};

export default storeObserver('stores', $2);
endsnippet

snippet mst "MobX Store"
/* eslint no-return-assign: 0 */
import { extendObservable } from 'mobx';
import {
	initialState, $1Model as $2Model
} from '../models/$1Model';
import {
	$1Actions as $2Actions
} from '../actions/RecipientListActions';

class $1Store {
	constructor() {
		extendObservable(this, {
			...$2Model(),
			...$2Actions(this, initialState)
		});
	}
}

export default $1Store;
endsnippet

###########
# IMPORTS #
###########

snippet imp
import $1 from "$1";
endsnippet

snippet req
const $1 = require('$2')
endsnippet

################
# node/express #
################

snippet exp "require express" i
const express = require('express')
const app = express()
endsnippet

snippet euse "express use" i
app.use($1)
endsnippet

snippet modex "module.exports" i
module.exports = $1
endsnippet

########
# AJAX #
########

snippet axios.get "Axios GET req"
const $1 = $2;

axios.get($1)
	.then($3 => $4)
	.catch(err => $5)
endsnippet

snippet axios.post "Axios POST req"
const $1 = $2;

axios.post($1, $3)
	.then($4 => $5)
	.catch(err => $6)
endsnippet

#############
# Utilities #
#############

snippet *title "Make Title case"
$1.charAt(0).toUpperCase() + $1.slice(1);
endsnippet
